Index: templates/articles.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'main.html' %}\r\n\r\n{% block content %}\r\n\r\n<h2 class=\"myHeader\">Total number of articles</h2>\r\n\r\n\r\n<h3 class=\"myHeader\">{{ total_articles }}</h3>\r\n\r\n\r\n\r\n\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/articles.html b/templates/articles.html
--- a/templates/articles.html	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/templates/articles.html	(date 1610905309523)
@@ -1,13 +1,91 @@
 {% extends 'main.html' %}
-
+{% load crispy_forms_tags %}
 {% block content %}
 
-<h2 class="myHeader">Total number of articles</h2>
+    {% load article_extra %}
+
+<div class="col-lg-6 container text-center">
+
+
+        <h2 class="myHeader">Number of total Covid-19 related articles</h2>
 
 
-<h3 class="myHeader">{{ total_articles }}</h3>
+        <h3 class="myHeader">{{ total_articles }}</h3>
 
+        <style>
+            form {
+                width: 100%;
+                height: 100%;
+            }
+        </style>
+
+
+
+        <form id="pg" novalidate method="get" action="">
+            {{ form|crispy }}
+            <p></p>
+            <p></p>
+            <input class="btn btn-primary" type="submit" value="Search">
+        </form>
+
+        <h2 class="myHeader">Number of articles found based on your search</h2>
+
+        <h3 class="myHeader">{{ searched_articles }}</h3>
+
+        <h2 class="myHeader">Search Results</h2>
+
+        <hr/>
+        {% for instance in article_page_ob %}
+            <div>
+                <div><strong><small>
+                    <a href="http://127.0.0.1:8000/articles_detail/">{{ instance.pubmed_id }}</a></small></strong>
+                </div>
+                <div><h3>{{ instance.title }}</h3></div>
+                <div><h3>{{ instance.publication_date }}</h3></div>
+                <div><strong><small>
+                {% for data in instance.authors %}
+                        <span>
+                        {{ data.firstname }} {{ data.lastname }} {{ data.initials }} {{ data.affiliation }},
+                        </span>
+                    {% endfor %}
+                </small></strong></div>
+                <p>
+                <p>
+                    <div>
+                <p>{{ instance.abstract|truncatechars:500 }}</p></div>
+            <div><strong><small>
+                {% for data in instance.keywords %}
+                        <span>
+                        {{ data}},
+                        </span>
+                    {% endfor %}</small></strong></div>
+            </div>
+            <hr/>
+        {% endfor %}
+
+      <div class="pagination">
+        <div class="container text-center">
+                <span class="step-links">
+                    {% if article_page_ob.has_previous %}
+                        <a href="?page=1&abstract={{ query }}">&laquo;First</a>
+                        <a href="?page={{ article_page_ob.previous_page_number }}&abstract={{ query }}">Previous</a>
+                    {% endif %}
+                    <span class="current" >
+                        Page {{ article_page_ob.number }} of {{ article_page_ob.paginator.num_pages }}.
+                    </span>
+
+                    {% if article_page_ob.has_next %}
+                        <a href="?page={{ article_page_ob.next_page_number }}&abstract={{ query }}">Next</a>
+                        <a href="?page={{ article_page_ob.paginator.num_pages }}&abstract={{ query }}">&raquo; Last</a>
+                    {% endif %}
+                </span>
+        </div>
+
+      </div>
+</div>
 
 
 
-{% endblock %}
\ No newline at end of file
+
+{% endblock %}
+
Index: articles/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.utils import timezone\r\nfrom django.db import models\r\n\r\n\r\nclass article(models.Model):\r\n\r\n    pubmed_id = models.CharField(max_length=500, null=True)\r\n    id = models.IntegerField(default=150000, primary_key=True)\r\n    title = models.TextField(null=True)\r\n    abstract = models.TextField(null=True)\r\n    keywords = models.JSONField(default=list, null=True)\r\n    journal = models.TextField(null=True)\r\n    publication_date = models.DateTimeField(default=timezone.now, null=True)\r\n    authors = models.JSONField(default=list, null=True)\r\n    conclusions = models.TextField(null=True)\r\n    results = models.TextField(null=True)\r\n    copyrights = models.TextField(null=True)\r\n    doi = models.CharField(max_length=1000, null=True)\r\n\r\n    def __str__(self):\r\n        return self.pubmed_id\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/articles/models.py b/articles/models.py
--- a/articles/models.py	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/articles/models.py	(date 1610905309533)
@@ -6,8 +6,8 @@
 
     pubmed_id = models.CharField(max_length=500, null=True)
     id = models.IntegerField(default=150000, primary_key=True)
-    title = models.TextField(null=True)
-    abstract = models.TextField(null=True)
+    title = models.TextField(null=True, blank=True)
+    abstract = models.TextField(null=True, blank=True)
     keywords = models.JSONField(default=list, null=True)
     journal = models.TextField(null=True)
     publication_date = models.DateTimeField(default=timezone.now, null=True)
@@ -18,7 +18,7 @@
     doi = models.CharField(max_length=1000, null=True)
 
     def __str__(self):
-        return self.pubmed_id
+        return self.title
 
 
 
Index: articles/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import itertools\r\nimport json\r\n\r\nfrom bson import json_util\r\nfrom django.shortcuts import render\r\nfrom .models import *\r\nfrom pymongo import MongoClient\r\n\r\n\r\ncluster = MongoClient(\"mongodb+srv://dbuserdolphin:dbpassworddolphin@cluster0.h6bhx.mongodb.net/dolphin?retryWrites=true&w=majority\")\r\ndb = cluster[\"dolphin\"]\r\ncollection = db[\"articles_article\"]\r\n\r\n\r\ndef home(request):\r\n\r\n    articles = article.objects.all()\r\n    total_articles = articles.count()\r\n    context = {\"total_articles\": total_articles}\r\n    return render(request, \"articles.html\", context)\r\n\r\nimport datetime\r\n\r\ndef all_articles(request):\r\n\r\n    context = {}\r\n    for i in range(30):\r\n        context[\"articles_\"+str(i)] = request.session.get(\"articles_\"+str(i))\r\n        context[\"q_\"+str(i)] = request.session.get(\"q_\"+str(i))\r\n        context[\"total_count_\"+str(i)] = request.session.get(\"total_count_\"+str(i))\r\n\r\n\r\n\r\n    for i in range(30):\r\n        dates = []\r\n        articles = {}\r\n        thearticles = context[\"articles_\" + str(i)]\r\n        if thearticles is not None:\r\n            for item in thearticles:\r\n                date = item[\"publication_date\"]\r\n                date = list(date.values())[0]\r\n                s = str(date)\r\n                date = int(s[:10])\r\n                date = datetime.datetime.fromtimestamp(date).strftime(\"%Y, %B\")\r\n                dates.append(date)\r\n                if date in articles.keys():\r\n                    articles[date].append(item)\r\n                else:\r\n                    articles[date] = []\r\n                    articles[date].append(item)\r\n\r\n            context[\"articles\" + str(i)] = articles\r\n            label = {i: dates.count(i) for i in dates}\r\n            context[\"labels_\" + str(i)] = list(label.keys())\r\n            context[\"counts_\" + str(i)] = list(label.values())\r\n\r\n    return render(request, \"all_articles.html\", context)\r\n\r\n\r\ndef reqs(request):\r\n\r\n    queries_0 = []\r\n    queries_1 = []\r\n    queries_2 = []\r\n    queries_3 = []\r\n\r\n    if 'q_0' in request.GET:\r\n        query = request.GET[\"q_0\"]\r\n        queriess = query.split(\" \")\r\n        queries_0 = queries_0 + queriess\r\n\r\n    if 'q_1' in request.GET:\r\n        query = request.GET[\"q_1\"]\r\n        queriess = query.split(\" \")\r\n        queries_1 = queries_1 + queriess\r\n\r\n    if 'q_2' in request.GET:\r\n        query = request.GET[\"q_2\"]\r\n        queriess = query.split(\" \")\r\n        queries_2 = queries_2 + queriess\r\n\r\n    if 'q_3' in request.GET:\r\n        query = request.GET[\"q_3\"]\r\n        queriess = query.split(\" \")\r\n        queries_3 = queries_3 + queriess\r\n\r\n    return queries_0, queries_1, queries_2, queries_3\r\n\r\n\r\ndef dimensional_search(request):\r\n\r\n    context = {}\r\n    index = 0\r\n    my_array = []\r\n\r\n    if request.GET:\r\n\r\n        queries_0, queries_1, queries_2, queries_3 = reqs(request)\r\n\r\n        context[\"queries_0\"] = queries_0\r\n        context[\"queries_1\"] = queries_1\r\n        context[\"queries_2\"] = queries_2\r\n        context[\"queries_3\"] = queries_3\r\n\r\n        for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):\r\n\r\n            if a is None and b is not None:\r\n                a = b\r\n            if a is None and c is not None:\r\n                a = c\r\n            if b is None and a is not None:\r\n                b = a\r\n            if c is None and a is not None:\r\n                c = a\r\n            if d is None and a is not None:\r\n                d = a\r\n\r\n            articles = collection.find({\r\n                \"$or\": [\r\n                    {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                              {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                              {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                              {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n\r\n                    {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                              {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                              {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                              {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                ]\r\n            })\r\n\r\n            total_count = collection.count_documents({\r\n                \"$or\": [\r\n                    {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                              {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                              {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                              {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n                    {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                              {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                              {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                              {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                ]\r\n            })\r\n\r\n            context[\"total_count_\"+str(index)] = total_count\r\n            request.session[\"total_count_\"+str(index)] = total_count\r\n            if a != b and a != c and a != d:\r\n                context[\"q_\" + str(index)] = [a, b, c, d]\r\n                request.session[\"q_\" + str(index)] = [a, b, c, d]\r\n\r\n            if a == b and a == c and a == d:\r\n                context[\"q_\" + str(index)] = [a]\r\n                request.session[\"q_\" + str(index)] = [a]\r\n\r\n            if a == c and a == d and a != b:\r\n                context[\"q_\" + str(index)] = [a, b]\r\n                request.session[\"q_\" + str(index)] = [a, b]\r\n\r\n            if a == d and a != c:\r\n                context[\"q_\" + str(index)] = [a, b, c]\r\n                request.session[\"q_\" + str(index)] = [a, b, c]\r\n\r\n\r\n            for item in articles:\r\n                my_array.append(item)\r\n\r\n            context[\"articles_\" + str(index)] = my_array\r\n            request.session[\"articles_\" + str(index)] = parse_json(context[\"articles_\" + str(index)])\r\n            my_array.clear()\r\n            index += 1\r\n\r\n        if len(queries_1) > 1:\r\n\r\n            queries_1.reverse()\r\n\r\n            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):\r\n\r\n                if a is None and b is not None:\r\n                    a = b\r\n                if a is None and c is not None:\r\n                    a = c\r\n                if b is None and a is not None:\r\n                    b = a\r\n                if c is None and a is not None:\r\n                    c = a\r\n                if d is None and a is not None:\r\n                    d = a\r\n\r\n                articles = collection.find({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                total_count = collection.count_documents({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                context[\"total_count_\" + str(index)] = total_count\r\n                if a != b and a != c and a != d:\r\n                    context[\"q_\" + str(index)] = [a, b, c, d]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c, d]\r\n\r\n                if a == b and a == c and a == d:\r\n                    context[\"q_\" + str(index)] = [a]\r\n                    request.session[\"q_\" + str(index)] = [a]\r\n\r\n                if a == c and a == d and a != b:\r\n                    context[\"q_\" + str(index)] = [a, b]\r\n                    request.session[\"q_\" + str(index)] = [a, b]\r\n\r\n                if a == d and a != c:\r\n                    context[\"q_\" + str(index)] = [a, b, c]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c]\r\n\r\n\r\n                for item in articles:\r\n                    my_array.append(item)\r\n\r\n                context[\"articles_\" + str(index)] = my_array\r\n                request.session[\"articles_\" + str(index)] = parse_json(context[\"articles_\" + str(index)])\r\n                my_array.clear()\r\n                index += 1\r\n\r\n        if len(queries_2) > 1:\r\n\r\n            queries_2.reverse()\r\n\r\n            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):\r\n\r\n                if a is None and b is not None:\r\n                    a = b\r\n                if a is None and c is not None:\r\n                    a = c\r\n                if b is None and a is not None:\r\n                    b = a\r\n                if c is None and a is not None:\r\n                    c = a\r\n                if d is None and a is not None:\r\n                    d = a\r\n\r\n                articles = collection.find({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                total_count = collection.count_documents({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                context[\"total_count_\" + str(index)] = total_count\r\n                if a != b and a != c and a != d:\r\n                    context[\"q_\" + str(index)] = [a, b, c, d]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c, d]\r\n\r\n                if a == b and a == c and a == d:\r\n                    context[\"q_\" + str(index)] = [a]\r\n                    request.session[\"q_\" + str(index)] = [a]\r\n\r\n                if a == c and a == d and a != b:\r\n                    context[\"q_\" + str(index)] = [a, b]\r\n                    request.session[\"q_\" + str(index)] = [a, b]\r\n\r\n                if a == d and a != c:\r\n                    context[\"q_\" + str(index)] = [a, b, c]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c]\r\n\r\n\r\n                for item in articles:\r\n                    my_array.append(item)\r\n\r\n                context[\"articles_\" + str(index)] = my_array\r\n                request.session[\"articles_\" + str(index)] = parse_json(context[\"articles_\" + str(index)])\r\n                my_array.clear()\r\n                index += 1\r\n\r\n        if len(queries_1) > 1:\r\n\r\n            queries_1.reverse()\r\n\r\n            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):\r\n\r\n                if a is None and b is not None:\r\n                    a = b\r\n                if a is None and c is not None:\r\n                    a = c\r\n                if b is None and a is not None:\r\n                    b = a\r\n                if c is None and a is not None:\r\n                    c = a\r\n                if d is None and a is not None:\r\n                    d = a\r\n\r\n                articles = collection.find({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                total_count = collection.count_documents({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                context[\"total_count_\" + str(index)] = total_count\r\n                if a != b and a != c and a != d:\r\n                    context[\"q_\" + str(index)] = [a, b, c, d]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c, d]\r\n\r\n                if a == b and a == c and a == d:\r\n                    context[\"q_\" + str(index)] = [a]\r\n                    request.session[\"q_\" + str(index)] = [a]\r\n\r\n                if a == c and a == d and a != b:\r\n                    context[\"q_\" + str(index)] = [a, b]\r\n                    request.session[\"q_\" + str(index)] = [a, b]\r\n\r\n                if a == d and a != c:\r\n                    context[\"q_\" + str(index)] = [a, b, c]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c]\r\n\r\n\r\n                for item in articles:\r\n                    my_array.append(item)\r\n\r\n                context[\"articles_\" + str(index)] = my_array\r\n                request.session[\"articles_\" + str(index)] = parse_json(context[\"articles_\" + str(index)])\r\n                my_array.clear()\r\n                index += 1\r\n\r\n\r\n        if len(queries_3) > 1:\r\n\r\n            queries_3.reverse()\r\n\r\n            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):\r\n\r\n                if a is None and b is not None:\r\n                    a = b\r\n                if a is None and c is not None:\r\n                    a = c\r\n                if b is None and a is not None:\r\n                    b = a\r\n                if c is None and a is not None:\r\n                    c = a\r\n                if d is None and a is not None:\r\n                    d = a\r\n\r\n                articles = collection.find({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                total_count = collection.count_documents({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                context[\"total_count_\" + str(index)] = total_count\r\n                if a != b and a != c and a != d:\r\n                    context[\"q_\" + str(index)] = [a, b, c, d]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c, d]\r\n\r\n                if a == b and a == c and a == d:\r\n                    context[\"q_\" + str(index)] = [a]\r\n                    request.session[\"q_\" + str(index)] = [a]\r\n\r\n                if a == c and a == d and a != b:\r\n                    context[\"q_\" + str(index)] = [a, b]\r\n                    request.session[\"q_\" + str(index)] = [a, b]\r\n\r\n                if a == d and a != c:\r\n                    context[\"q_\" + str(index)] = [a, b, c]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c]\r\n\r\n\r\n                for item in articles:\r\n                    my_array.append(item)\r\n\r\n                context[\"articles_\" + str(index)] = my_array\r\n                request.session[\"articles_\" + str(index)] = parse_json(context[\"articles_\" + str(index)])\r\n                my_array.clear()\r\n                index += 1\r\n\r\n        if len(queries_1) > 1:\r\n\r\n            queries_1.reverse()\r\n\r\n            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):\r\n\r\n                if a is None and b is not None:\r\n                    a = b\r\n                if a is None and c is not None:\r\n                    a = c\r\n                if b is None and a is not None:\r\n                    b = a\r\n                if c is None and a is not None:\r\n                    c = a\r\n                if d is None and a is not None:\r\n                    d = a\r\n\r\n                articles = collection.find({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                total_count = collection.count_documents({\r\n                    \"$or\": [\r\n                        {\"$and\": [{\"abstract\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"abstract\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]},\r\n                        {\"$and\": [{\"title\": {\"$regex\": r'\\b' + a + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + b + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + c + r'\\b', \"$options\": 'i'}},\r\n                                  {\"title\": {\"$regex\": r'\\b' + d + r'\\b', \"$options\": 'i'}}]}\r\n                    ]\r\n                })\r\n\r\n                context[\"total_count_\" + str(index)] = total_count\r\n                if a != b and a != c and a != d:\r\n                    context[\"q_\" + str(index)] = [a, b, c, d]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c, d]\r\n\r\n                if a == b and a == c and a == d:\r\n                    context[\"q_\" + str(index)] = [a]\r\n                    request.session[\"q_\" + str(index)] = [a]\r\n\r\n                if a == c and a == d and a != b:\r\n                    context[\"q_\" + str(index)] = [a, b]\r\n                    request.session[\"q_\" + str(index)] = [a, b]\r\n\r\n                if a == d and a != c:\r\n                    context[\"q_\" + str(index)] = [a, b, c]\r\n                    request.session[\"q_\" + str(index)] = [a, b, c]\r\n\r\n                for item in articles:\r\n                    my_array.append(item)\r\n\r\n                context[\"articles_\" + str(index)] = my_array\r\n                request.session[\"articles_\" + str(index)] = parse_json(context[\"articles_\" + str(index)])\r\n                my_array.clear()\r\n                index += 1\r\n\r\n    return render(request, \"dimension.html\", {'context': context})\r\n\r\n\r\ndef parse_json(data):\r\n    return json.loads(json_util.dumps(data))\r\n\r\nimport datetime\r\n\r\n\r\ndef chart(request):\r\n\r\n    context = {}\r\n    for i in range(30):\r\n        context[\"articles_\"+str(i)] = request.session.get(\"articles_\"+str(i))\r\n\r\n    data = []\r\n    labels = []\r\n\r\n\r\n    for i in range(2):\r\n\r\n        dates = []\r\n        context[\"thearticles_\" + str(i)] = context[\"articles_\" + str(i)]\r\n        for item in context[\"articles_\" + str(i)]:\r\n            date = item[\"publication_date\"]\r\n            year = date.year\r\n            month = date.month\r\n            the_date = str(year) + \", \" + str(month)\r\n            dates.append(the_date)\r\n\r\n        my_dict = {i: dates.count(i) for i in dates}\r\n        context.labels = labels\r\n\r\n        context[\"all_\" + str(i)] = my_dict\r\n\r\n    return render(request, \"chart.html\", context)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/articles/views.py b/articles/views.py
--- a/articles/views.py	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/articles/views.py	(date 1610905742298)
@@ -1,564 +1,169 @@
-import itertools
 import json
-
-from bson import json_util
-from django.shortcuts import render
-from .models import *
+from django.shortcuts import render, redirect
+from .models import article
+from .forms import ArticleSearch
+from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
 from pymongo import MongoClient
+import re
+from pprint import pprint
+from django.shortcuts import get_object_or_404
+# from django.contrib.postgres.search import SearchVector, SearchQuery
+#from .filters import ArticleFilter
 
+# from pymongo import Connection
+# import pickle
 
-cluster = MongoClient("mongodb+srv://dbuserdolphin:dbpassworddolphin@cluster0.h6bhx.mongodb.net/dolphin?retryWrites=true&w=majority")
+cluster = MongoClient(
+    "mongodb+srv://dbuserdolphin:dbpassworddolphin@cluster0.h6bhx.mongodb.net/dolphin?retryWrites=true&w=majority")
 db = cluster["dolphin"]
 collection = db["articles_article"]
 
 
+def split_line(query):
+    # split the text
+    result = query.split(" ")
+    words = []
+    # for each word in the line:
+    for word in result:
+        # append the word
+        words.append(word)
+    return words
+
+
 def home(request):
-
-    articles = article.objects.all()
-    total_articles = articles.count()
-    context = {"total_articles": total_articles}
-    return render(request, "articles.html", context)
-
-import datetime
-
-def all_articles(request):
+    all_articles = article.objects.all()
+    form = ArticleSearch()
+    total_articles = all_articles.count()
+    context = {
+        "total_articles": total_articles,
+        "form": form,
+    }
+    query = request.GET.get('abstract', '')
+    print(query)
+    date = request.GET.get('publication_date', '')
+    date2 = request.GET.get('publication_date', '')
+    print(date)
+    if request.method == 'POST':
 
-    context = {}
-    for i in range(30):
-        context["articles_"+str(i)] = request.session.get("articles_"+str(i))
-        context["q_"+str(i)] = request.session.get("q_"+str(i))
-        context["total_count_"+str(i)] = request.session.get("total_count_"+str(i))
+        pattern = r'(?i)\b' + query + r'\b'
+        regex = re.compile(pattern)
+        articles = []
+        articl = collection.find({"$or": [{"abstract": {"$regex": regex}}, {"title": {"$regex": regex}}]})
+        for item in articl:
+            articles.append(item)
 
+        searched_total_articles = articl.count()
+        paginated_articles = Paginator(articles, 10)
+        page_number = request.GET.get('page', None)
+        article_page_ob = paginated_articles.get_page(page_number)
+        context = {
+            "total_articles": total_articles,
+            "searched_articles": searched_total_articles,
+            "articles": articles,
+            "form": form,
+            "article_page_ob": article_page_ob,
+            "query": query
+        }
+    elif request.method == 'GET':
 
-
-    for i in range(30):
-        dates = []
-        articles = {}
-        thearticles = context["articles_" + str(i)]
-        if thearticles is not None:
-            for item in thearticles:
-                date = item["publication_date"]
-                date = list(date.values())[0]
-                s = str(date)
-                date = int(s[:10])
-                date = datetime.datetime.fromtimestamp(date).strftime("%Y, %B")
-                dates.append(date)
-                if date in articles.keys():
-                    articles[date].append(item)
+        if query:
+            queris = split_line(query)
+            articles = []
+            for q in queris:
+                pattern = r'(?i)\b' + q + r'\b'
+                regex = re.compile(pattern)
+                articl = collection.find({"$or": [{"abstract": {"$regex": regex}}, {"title": {"$regex": regex}}]})
+                #articl = collection.find({"$and": [{"$or": [{"abstract": {"$regex": regex}}, {"title": {"$regex": regex}}]}, {"publication_date": {date}}]})
+                if len(articles) == 0:
+                    for item in articl:
+                        articles.append(item)
                 else:
-                    articles[date] = []
-                    articles[date].append(item)
-
-            context["articles" + str(i)] = articles
-            label = {i: dates.count(i) for i in dates}
-            context["labels_" + str(i)] = list(label.keys())
-            context["counts_" + str(i)] = list(label.values())
-
-    return render(request, "all_articles.html", context)
-
-
-def reqs(request):
-
-    queries_0 = []
-    queries_1 = []
-    queries_2 = []
-    queries_3 = []
-
-    if 'q_0' in request.GET:
-        query = request.GET["q_0"]
-        queriess = query.split(" ")
-        queries_0 = queries_0 + queriess
-
-    if 'q_1' in request.GET:
-        query = request.GET["q_1"]
-        queriess = query.split(" ")
-        queries_1 = queries_1 + queriess
-
-    if 'q_2' in request.GET:
-        query = request.GET["q_2"]
-        queriess = query.split(" ")
-        queries_2 = queries_2 + queriess
-
-    if 'q_3' in request.GET:
-        query = request.GET["q_3"]
-        queriess = query.split(" ")
-        queries_3 = queries_3 + queriess
-
-    return queries_0, queries_1, queries_2, queries_3
-
-
-def dimensional_search(request):
-
-    context = {}
-    index = 0
-    my_array = []
-
-    if request.GET:
-
-        queries_0, queries_1, queries_2, queries_3 = reqs(request)
-
-        context["queries_0"] = queries_0
-        context["queries_1"] = queries_1
-        context["queries_2"] = queries_2
-        context["queries_3"] = queries_3
-
-        for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):
-
-            if a is None and b is not None:
-                a = b
-            if a is None and c is not None:
-                a = c
-            if b is None and a is not None:
-                b = a
-            if c is None and a is not None:
-                c = a
-            if d is None and a is not None:
-                d = a
-
-            articles = collection.find({
-                "$or": [
-                    {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                              {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                              {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                              {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-
-                    {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                              {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                              {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                              {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                ]
-            })
-
-            total_count = collection.count_documents({
-                "$or": [
-                    {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                              {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                              {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                              {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-                    {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                              {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                              {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                              {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                ]
-            })
-
-            context["total_count_"+str(index)] = total_count
-            request.session["total_count_"+str(index)] = total_count
-            if a != b and a != c and a != d:
-                context["q_" + str(index)] = [a, b, c, d]
-                request.session["q_" + str(index)] = [a, b, c, d]
-
-            if a == b and a == c and a == d:
-                context["q_" + str(index)] = [a]
-                request.session["q_" + str(index)] = [a]
-
-            if a == c and a == d and a != b:
-                context["q_" + str(index)] = [a, b]
-                request.session["q_" + str(index)] = [a, b]
-
-            if a == d and a != c:
-                context["q_" + str(index)] = [a, b, c]
-                request.session["q_" + str(index)] = [a, b, c]
-
-
-            for item in articles:
-                my_array.append(item)
-
-            context["articles_" + str(index)] = my_array
-            request.session["articles_" + str(index)] = parse_json(context["articles_" + str(index)])
-            my_array.clear()
-            index += 1
-
-        if len(queries_1) > 1:
-
-            queries_1.reverse()
-
-            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):
-
-                if a is None and b is not None:
-                    a = b
-                if a is None and c is not None:
-                    a = c
-                if b is None and a is not None:
-                    b = a
-                if c is None and a is not None:
-                    c = a
-                if d is None and a is not None:
-                    d = a
-
-                articles = collection.find({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                total_count = collection.count_documents({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                context["total_count_" + str(index)] = total_count
-                if a != b and a != c and a != d:
-                    context["q_" + str(index)] = [a, b, c, d]
-                    request.session["q_" + str(index)] = [a, b, c, d]
-
-                if a == b and a == c and a == d:
-                    context["q_" + str(index)] = [a]
-                    request.session["q_" + str(index)] = [a]
-
-                if a == c and a == d and a != b:
-                    context["q_" + str(index)] = [a, b]
-                    request.session["q_" + str(index)] = [a, b]
-
-                if a == d and a != c:
-                    context["q_" + str(index)] = [a, b, c]
-                    request.session["q_" + str(index)] = [a, b, c]
-
-
-                for item in articles:
-                    my_array.append(item)
-
-                context["articles_" + str(index)] = my_array
-                request.session["articles_" + str(index)] = parse_json(context["articles_" + str(index)])
-                my_array.clear()
-                index += 1
-
-        if len(queries_2) > 1:
-
-            queries_2.reverse()
-
-            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):
-
-                if a is None and b is not None:
-                    a = b
-                if a is None and c is not None:
-                    a = c
-                if b is None and a is not None:
-                    b = a
-                if c is None and a is not None:
-                    c = a
-                if d is None and a is not None:
-                    d = a
-
-                articles = collection.find({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                total_count = collection.count_documents({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                context["total_count_" + str(index)] = total_count
-                if a != b and a != c and a != d:
-                    context["q_" + str(index)] = [a, b, c, d]
-                    request.session["q_" + str(index)] = [a, b, c, d]
-
-                if a == b and a == c and a == d:
-                    context["q_" + str(index)] = [a]
-                    request.session["q_" + str(index)] = [a]
-
-                if a == c and a == d and a != b:
-                    context["q_" + str(index)] = [a, b]
-                    request.session["q_" + str(index)] = [a, b]
-
-                if a == d and a != c:
-                    context["q_" + str(index)] = [a, b, c]
-                    request.session["q_" + str(index)] = [a, b, c]
-
-
-                for item in articles:
-                    my_array.append(item)
-
-                context["articles_" + str(index)] = my_array
-                request.session["articles_" + str(index)] = parse_json(context["articles_" + str(index)])
-                my_array.clear()
-                index += 1
-
-        if len(queries_1) > 1:
-
-            queries_1.reverse()
-
-            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):
-
-                if a is None and b is not None:
-                    a = b
-                if a is None and c is not None:
-                    a = c
-                if b is None and a is not None:
-                    b = a
-                if c is None and a is not None:
-                    c = a
-                if d is None and a is not None:
-                    d = a
-
-                articles = collection.find({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                total_count = collection.count_documents({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
+                    temp_arc=[]
+                    for a in articl:
+                        if a in articles:
+                            temp_arc.append(a)
+                    articles = temp_arc
 
-                context["total_count_" + str(index)] = total_count
-                if a != b and a != c and a != d:
-                    context["q_" + str(index)] = [a, b, c, d]
-                    request.session["q_" + str(index)] = [a, b, c, d]
 
-                if a == b and a == c and a == d:
-                    context["q_" + str(index)] = [a]
-                    request.session["q_" + str(index)] = [a]
+            searched_total_articles = len(articles)
 
-                if a == c and a == d and a != b:
-                    context["q_" + str(index)] = [a, b]
-                    request.session["q_" + str(index)] = [a, b]
+            paginated_articles = Paginator(articles, 10)
+            page_number = request.GET.get('page', None)
+            article_page_ob = paginated_articles.get_page(page_number)
+            for item in paginated_articles.object_list:
+                authors = item['authors']
+                keywords = item['keywords']
+                b = json.loads(authors)
+                c = json.loads(keywords)
+                item['authors'] = b
+                item['keywords'] = c
+            #pprint (vars(paginated_articles))
+            context = {
+                "total_articles": total_articles,
+                "searched_articles": searched_total_articles,
+                "articles": articles,
+                "form": form,
+                "article_page_ob": article_page_ob,
+                "query": query,
+                "queris": queris
+            }
 
-                if a == d and a != c:
-                    context["q_" + str(index)] = [a, b, c]
-                    request.session["q_" + str(index)] = [a, b, c]
+    return render(request, "articles.html", context)
 
 
-                for item in articles:
-                    my_array.append(item)
+def article_detail(request):
+    all_articles = article.objects.all()
+    form = ArticleSearch(request.POST or None)
+    total_articles = all_articles.count()
+    context = {
+        "total_articles": total_articles,
+        "form": form,
+    }
+    query = request.GET.get('abstract', '')
+    if request.method == 'POST':
 
-                context["articles_" + str(index)] = my_array
-                request.session["articles_" + str(index)] = parse_json(context["articles_" + str(index)])
-                my_array.clear()
-                index += 1
+        pattern = r'(?i)\b' + query + r'\b'
+        regex = re.compile(pattern)
+        articles = []
+        articl = collection.find({"$or": [{"abstract": {"$regex": regex}}, {"title": {"$regex": regex}}]})
+        for item in articl:
+            articles.append(item)
 
+        searched_total_articles = articl.count()
+        paginated_articles = Paginator(articles, 10)
+        page_number = request.GET.get('page', None)
+        article_page_ob = paginated_articles.get_page(page_number)
+        context = {
+            "total_articles": total_articles,
+            "searched_articles": searched_total_articles,
+            "articles": articles,
+            "form": form,
+            "article_page_ob": article_page_ob,
+            "query": query
+        }
+    elif request.method == 'GET':
 
-        if len(queries_3) > 1:
+        if query:
+            pattern = r'(?i)\b' + query + r'\b'
+            regex = re.compile(pattern)
+            articles = []
+            articl = collection.find({"$or": [{"abstract": {"$regex": regex}}, {"title": {"$regex": regex}}]})
+            for item in articl:
+                articles.append(item)
 
-            queries_3.reverse()
+            searched_total_articles = articl.count()
 
-            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):
+            paginated_articles = Paginator(articles, 10)
+            page_number = request.GET.get('page', None)
+            article_page_ob = paginated_articles.get_page(page_number)
 
-                if a is None and b is not None:
-                    a = b
-                if a is None and c is not None:
-                    a = c
-                if b is None and a is not None:
-                    b = a
-                if c is None and a is not None:
-                    c = a
-                if d is None and a is not None:
-                    d = a
+            context = {
+                "total_articles": total_articles,
+                "searched_articles": searched_total_articles,
+                "articles": articles,
+                "form": form,
+                "article_page_ob": article_page_ob,
+                "query": query
+            }
 
-                articles = collection.find({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                total_count = collection.count_documents({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                context["total_count_" + str(index)] = total_count
-                if a != b and a != c and a != d:
-                    context["q_" + str(index)] = [a, b, c, d]
-                    request.session["q_" + str(index)] = [a, b, c, d]
-
-                if a == b and a == c and a == d:
-                    context["q_" + str(index)] = [a]
-                    request.session["q_" + str(index)] = [a]
-
-                if a == c and a == d and a != b:
-                    context["q_" + str(index)] = [a, b]
-                    request.session["q_" + str(index)] = [a, b]
-
-                if a == d and a != c:
-                    context["q_" + str(index)] = [a, b, c]
-                    request.session["q_" + str(index)] = [a, b, c]
-
-
-                for item in articles:
-                    my_array.append(item)
-
-                context["articles_" + str(index)] = my_array
-                request.session["articles_" + str(index)] = parse_json(context["articles_" + str(index)])
-                my_array.clear()
-                index += 1
-
-        if len(queries_1) > 1:
-
-            queries_1.reverse()
-
-            for (a, b, c, d) in itertools.zip_longest(queries_0, queries_1, queries_2, queries_3):
-
-                if a is None and b is not None:
-                    a = b
-                if a is None and c is not None:
-                    a = c
-                if b is None and a is not None:
-                    b = a
-                if c is None and a is not None:
-                    c = a
-                if d is None and a is not None:
-                    d = a
-
-                articles = collection.find({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                total_count = collection.count_documents({
-                    "$or": [
-                        {"$and": [{"abstract": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"abstract": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]},
-                        {"$and": [{"title": {"$regex": r'\b' + a + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + b + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + c + r'\b', "$options": 'i'}},
-                                  {"title": {"$regex": r'\b' + d + r'\b', "$options": 'i'}}]}
-                    ]
-                })
-
-                context["total_count_" + str(index)] = total_count
-                if a != b and a != c and a != d:
-                    context["q_" + str(index)] = [a, b, c, d]
-                    request.session["q_" + str(index)] = [a, b, c, d]
-
-                if a == b and a == c and a == d:
-                    context["q_" + str(index)] = [a]
-                    request.session["q_" + str(index)] = [a]
-
-                if a == c and a == d and a != b:
-                    context["q_" + str(index)] = [a, b]
-                    request.session["q_" + str(index)] = [a, b]
-
-                if a == d and a != c:
-                    context["q_" + str(index)] = [a, b, c]
-                    request.session["q_" + str(index)] = [a, b, c]
-
-                for item in articles:
-                    my_array.append(item)
-
-                context["articles_" + str(index)] = my_array
-                request.session["articles_" + str(index)] = parse_json(context["articles_" + str(index)])
-                my_array.clear()
-                index += 1
-
-    return render(request, "dimension.html", {'context': context})
-
-
-def parse_json(data):
-    return json.loads(json_util.dumps(data))
-
-import datetime
-
-
-def chart(request):
-
-    context = {}
-    for i in range(30):
-        context["articles_"+str(i)] = request.session.get("articles_"+str(i))
-
-    data = []
-    labels = []
-
-
-    for i in range(2):
-
-        dates = []
-        context["thearticles_" + str(i)] = context["articles_" + str(i)]
-        for item in context["articles_" + str(i)]:
-            date = item["publication_date"]
-            year = date.year
-            month = date.month
-            the_date = str(year) + ", " + str(month)
-            dates.append(the_date)
-
-        my_dict = {i: dates.count(i) for i in dates}
-        context.labels = labels
-
-        context["all_" + str(i)] = my_dict
-
-    return render(request, "chart.html", context)
-
-
-
-
-
-
-
+    return render(request, "articles_detail.html", )
Index: articles/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n\r\n   path('', views.home, name='home'),\r\n   path('dimsearch/', views.dimensional_search, name='dimensional_search'),\r\n   path('all_articles/', views.all_articles, name='all_articles'),\r\n   path('chart/', views.chart, name='chart'),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/articles/urls.py b/articles/urls.py
--- a/articles/urls.py	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/articles/urls.py	(date 1610905557468)
@@ -1,10 +1,10 @@
 from django.urls import path
 from . import views
+from .views import home
 
 urlpatterns = [
 
    path('', views.home, name='home'),
-   path('dimsearch/', views.dimensional_search, name='dimensional_search'),
-   path('all_articles/', views.all_articles, name='all_articles'),
-   path('chart/', views.chart, name='chart'),
+   path('articles_detail/', views.article_detail, name='articles_detail')
+   #path('', views.search, name='search'),
 ]
Index: articles/templatetags/article_extra.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/articles/templatetags/article_extra.py b/articles/templatetags/article_extra.py
new file mode 100644
--- /dev/null	(date 1610905557675)
+++ b/articles/templatetags/article_extra.py	(date 1610905557675)
@@ -0,0 +1,15 @@
+from django import template
+
+register = template.Library()
+
+@register.simple_tag
+def url(value, field_name, urlencode=None):
+    u = '?{}={}'.format(field_name,value)
+
+    if  urlencode:
+        qs=urlencode.split('&')
+        searched_qs= filter(lambda p: p.split('=')[0]!=field_name, qs)
+        encoded_qs= '&'.join(searched_qs)
+        u= '{}&{}'.format(u, encoded_qs)
+
+    return u
Index: annotation/match.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/annotation/match.py b/annotation/match.py
new file mode 100644
--- /dev/null	(date 1610905557658)
+++ b/annotation/match.py	(date 1610905557658)
@@ -0,0 +1,3 @@
+from articles.models import article
+
+article.objects.filter(name__contains='epidemic')
Index: articles/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/articles/forms.py b/articles/forms.py
new file mode 100644
--- /dev/null	(date 1610905557640)
+++ b/articles/forms.py	(date 1610905557640)
@@ -0,0 +1,30 @@
+from django import forms
+from django.forms import Textarea, TextInput, DateTimeField, DateInput
+from datetime import datetime, time
+from .models import article
+
+#class ArticleForm(forms.ModelForm):
+#    class Meta:
+#        model = article
+#        fields = ['pubmed_id', 'id', 'title', 'abstract', 'keywords', 'journal', 'publication_date', 'authors', 'conclusions', 'results', 'copyrights', 'doi']
+
+class ArticleSearch(forms.ModelForm):
+    class Meta:
+        model = article
+        labels = {
+            "abstract": "Enter Search Term",
+            "publication_date": "Faceted Search"
+        }
+        fields = ['abstract', 'publication_date']
+        widgets = {
+            'abstract': TextInput(attrs={'size':'70', 'placeholder':"Enter Search Term"})
+            #'publication_date': datetime(attrs={'input_formats': ["%Y-%m-%d %H:%M:%S"]}),
+            #'publication_date' : forms.DateTimeField(required=False,input_formats=['%Y-%m-%d %H:%M:%S'])
+
+        }
+        #publication_date = DateTimeField(required=False,input_formats=['%Y-%m-%d %H:%M:%S'])
+        #publication_date = forms.DateField(widget=DateInput)
+#class DateInput(forms.DateInput):
+    #input_type = 'date'
+
+
Index: templates/search.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/search.html b/templates/search.html
new file mode 100644
--- /dev/null	(date 1610905557558)
+++ b/templates/search.html	(date 1610905557558)
@@ -0,0 +1,13 @@
+{% extends 'main.html' %}
+
+{% block content %}
+
+<h2 class="myHeader">Search</h2>
+
+
+<h3 class="myHeader">{{ results }}</h3>
+
+
+
+
+{% endblock %}
\ No newline at end of file
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
--- /dev/null	(date 1610905557542)
+++ b/requirements.txt	(date 1610905557542)
@@ -0,0 +1,23 @@
+asgiref==3.3.1
+bio==0.2.2
+biopython==1.78
+bson==0.5.8
+certifi==2020.12.5
+chardet==3.0.4
+dataclasses==0.6
+Django==3.1.4
+django-crispy-forms==1.10.0
+django-filter==2.4.0
+djangorestframework==3.12.2
+djangotoolbox==1.8.0
+djongo==1.3.3
+dnspython==2.0.0
+idna==2.10
+numpy==1.19.4
+pymongo==3.11.2
+python-dateutil==2.8.1
+pytz==2020.4
+requests==2.25.0
+six==1.15.0
+sqlparse==0.2.4
+urllib3==1.26.2
Index: templates/articles_detail.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/articles_detail.html b/templates/articles_detail.html
new file mode 100644
--- /dev/null	(date 1610905557532)
+++ b/templates/articles_detail.html	(date 1610905557532)
@@ -0,0 +1,10 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>WELCOME</title>
+</head>
+<body>
+{{ hello }}WELCOME
+</body>
+</html>
\ No newline at end of file
Index: templates/annotation.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/annotation.html b/templates/annotation.html
new file mode 100644
--- /dev/null	(date 1610905557524)
+++ b/templates/annotation.html	(date 1610905557524)
@@ -0,0 +1,13 @@
+{% extends 'main.html' %}
+
+{% block content %}
+
+<h2 class="myHeader">Annotation Search</h2>
+
+
+<h3 class="myHeader">{{ total_articles }}</h3>
+
+
+
+
+{% endblock %}
\ No newline at end of file
Index: annotation/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/annotation/urls.py b/annotation/urls.py
new file mode 100644
--- /dev/null	(date 1610905557516)
+++ b/annotation/urls.py	(date 1610905557516)
@@ -0,0 +1,7 @@
+from django.urls import path
+from . import views
+
+urlpatterns = [
+
+   path('', views.annot, name='annot'),
+]
Index: dolphin/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"dolphin URL Configuration\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/3.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path, include\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('', include('articles.urls'))\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dolphin/urls.py b/dolphin/urls.py
--- a/dolphin/urls.py	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/dolphin/urls.py	(date 1610905557574)
@@ -18,5 +18,7 @@
 
 urlpatterns = [
     path('admin/', admin.site.urls),
-    path('', include('articles.urls'))
+    path('', include('articles.urls')),
+    #path('search', include('articles.urls')),
+    path('annotation', include('annotation.urls')),
 ]
Index: dolphin/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for dolphin project.\r\n\r\nGenerated by 'django-admin startproject' using Django 3.1.4.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/3.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/3.1/ref/settings/\r\n\"\"\"\r\nimport os\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'djongo',\r\n        \"CLIENT\": {\r\n            \"name\": \"dolphin\",\r\n            \"host\": \"mongodb+srv://dbuserdolphin:dbpassworddolphin@cluster0.h6bhx.mongodb.net/dolphin?retryWrites=true&w=majority\",\r\n            \"username\": \"dbuserdolphin\",\r\n            \"password\": \"dbpassworddolphin\",\r\n            \"authMechanism\": \"SCRAM-SHA-1\",\r\n        }\r\n    }\r\n}\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'el3v911_hs0e@*0z8op$gn+39ti!db31lkuyg$99lvhdxh(4l*'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'articles',\r\n    'ontologies'\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'dolphin.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates'],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'dolphin.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\r\n\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\nSTATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, 'static')\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dolphin/settings.py b/dolphin/settings.py
--- a/dolphin/settings.py	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/dolphin/settings.py	(date 1610905557588)
@@ -50,8 +50,15 @@
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
+    #'django.core.context_processors.auth',
+    #'django.core.context_processors.debug',
+    #'django.core.context_processors.i18n',
+    #'django.core.context_processors.media',
+    #'django.core.context_processors.request',
+    'crispy_forms',
     'articles',
-    'ontologies'
+    'ontologies',
+    'annotation'
 ]
 
 MIDDLEWARE = [
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (dolphin)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/.idea/misc.xml	(date 1610905557609)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (dolphin)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (Dolphin)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/dolphin.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$\" />\r\n        <option name=\"settingsModule\" value=\"dolphin/settings.py\" />\r\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"migrations\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"chart.js\" level=\"application\" />\r\n    <orderEntry type=\"library\" name=\"Chart.js\" level=\"application\" />\r\n    <orderEntry type=\"library\" name=\"jquery-3.5.1\" level=\"application\" />\r\n    <orderEntry type=\"library\" name=\"materialize\" level=\"application\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/../dolphin\\templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dolphin.iml b/.idea/dolphin.iml
--- a/.idea/dolphin.iml	(revision bcee6b12c3dc914334eb5afdf6907a4428383df4)
+++ b/.idea/dolphin.iml	(date 1610905557626)
@@ -15,8 +15,9 @@
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
+      <excludeFolder url="file://$MODULE_DIR$/venv_a" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (Dolphin)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="chart.js" level="application" />
     <orderEntry type="library" name="Chart.js" level="application" />
diff --git a/articles/templatetags/__init__.py b/articles/templatetags/__init__.py
new file mode 100644
